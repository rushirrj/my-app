{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","placeholder","toggleMode","role","htmlFor","TextForm","text","setText","heading","rows","value","onChange","event","target","newText","toUpperCase","toLowerCase","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","showAlert","message","document","body","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8061c306.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\n\r\nfunction About() {\r\n\r\n    const [myStyle , setMyStyle]= useState({\r\n        color: 'black',\r\n        backgroundColor:'white'\r\n    })\r\n    const [btntext ,setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n   const toggleStyle=() =>{\r\n        if(myStyle.color === 'white'){\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white',\r\n                border: '2px solid white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <div className=\"container my-3\" style={myStyle}>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\"style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\"style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n          <button type=\"button\" className=\"btn btn-primary\" onClick={toggleStyle}>{btntext}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  About Us\r\n                </Link>\r\n              </li>\r\n             \r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React,{useState} from 'react'\r\n\r\nfunction TextForm(props) {\r\n    const handleUpCLick = () =>{\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n    }\r\n    const handleClearCLick = () =>{\r\n        let newText = \"\"\r\n        setText(newText)\r\n    }\r\n    const handleLowCLick = () =>{\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value);\r\n    }\r\n    const [text,setText] = useState(\"\");\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\"  style={{color :props.mode==='dark'?'white':'black'}}>\r\n            <div><h1>{props.heading}</h1></div>\r\n\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" style={{backgroundColor :props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'black'}} rows=\"8\" value={text} onChange={handleOnChange}></textarea>\r\n            </div>\r\n\r\n            <button className=\"btn btn-primary\" onClick={handleUpCLick}>\r\n                Convert to UpperCase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLowCLick}>\r\n                Convert To LowerCase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearCLick}>\r\n                Clear text\r\n            </button>\r\n            \r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{color :props.mode==='dark'?'white':'black'}}>\r\n            <h1>Your text Summary</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter Something to textbox\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);;\r\n    }\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n               <strong> {capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n}from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode]= useState('light');\n  const [alert , setAlert] = useState(null);\n  const showAlert = (message,type) =>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n  }\n  const toggleMode = () =>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark Mode Enabled\",\"success\")\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode Enabled\",\"success\")\n    }\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"textUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n\n        <Routes>\n          <Route path=\"/about\" element={<About/>}/>\n          <Route path=\"/\"\n          element={<TextForm heading=\"Enter the text to analyze below\" mode={mode}/>}/>\n        </Routes>\n        </div>\n        </Router>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}